// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	YadroService_ChangeHostName_FullMethodName = "/proto.YadroService/ChangeHostName"
	YadroService_ModifyDNS_FullMethodName      = "/proto.YadroService/ModifyDNS"
	YadroService_ListDNS_FullMethodName        = "/proto.YadroService/ListDNS"
)

// YadroServiceClient is the client API for YadroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YadroServiceClient interface {
	ChangeHostName(ctx context.Context, in *ChangeHostNameRequest, opts ...grpc.CallOption) (*ChangeHostNameResponse, error)
	ModifyDNS(ctx context.Context, in *ModifyDNSRequest, opts ...grpc.CallOption) (*ModifyDNSResponse, error)
	ListDNS(ctx context.Context, in *ListDNSRequest, opts ...grpc.CallOption) (*ListDNSResponse, error)
}

type yadroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYadroServiceClient(cc grpc.ClientConnInterface) YadroServiceClient {
	return &yadroServiceClient{cc}
}

func (c *yadroServiceClient) ChangeHostName(ctx context.Context, in *ChangeHostNameRequest, opts ...grpc.CallOption) (*ChangeHostNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeHostNameResponse)
	err := c.cc.Invoke(ctx, YadroService_ChangeHostName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yadroServiceClient) ModifyDNS(ctx context.Context, in *ModifyDNSRequest, opts ...grpc.CallOption) (*ModifyDNSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyDNSResponse)
	err := c.cc.Invoke(ctx, YadroService_ModifyDNS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yadroServiceClient) ListDNS(ctx context.Context, in *ListDNSRequest, opts ...grpc.CallOption) (*ListDNSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDNSResponse)
	err := c.cc.Invoke(ctx, YadroService_ListDNS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YadroServiceServer is the server API for YadroService service.
// All implementations must embed UnimplementedYadroServiceServer
// for forward compatibility
type YadroServiceServer interface {
	ChangeHostName(context.Context, *ChangeHostNameRequest) (*ChangeHostNameResponse, error)
	ModifyDNS(context.Context, *ModifyDNSRequest) (*ModifyDNSResponse, error)
	ListDNS(context.Context, *ListDNSRequest) (*ListDNSResponse, error)
	mustEmbedUnimplementedYadroServiceServer()
}

// UnimplementedYadroServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYadroServiceServer struct {
}

func (UnimplementedYadroServiceServer) ChangeHostName(context.Context, *ChangeHostNameRequest) (*ChangeHostNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeHostName not implemented")
}
func (UnimplementedYadroServiceServer) ModifyDNS(context.Context, *ModifyDNSRequest) (*ModifyDNSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyDNS not implemented")
}
func (UnimplementedYadroServiceServer) ListDNS(context.Context, *ListDNSRequest) (*ListDNSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDNS not implemented")
}
func (UnimplementedYadroServiceServer) mustEmbedUnimplementedYadroServiceServer() {}

// UnsafeYadroServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YadroServiceServer will
// result in compilation errors.
type UnsafeYadroServiceServer interface {
	mustEmbedUnimplementedYadroServiceServer()
}

func RegisterYadroServiceServer(s grpc.ServiceRegistrar, srv YadroServiceServer) {
	s.RegisterService(&YadroService_ServiceDesc, srv)
}

func _YadroService_ChangeHostName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeHostNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadroServiceServer).ChangeHostName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YadroService_ChangeHostName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadroServiceServer).ChangeHostName(ctx, req.(*ChangeHostNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YadroService_ModifyDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadroServiceServer).ModifyDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YadroService_ModifyDNS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadroServiceServer).ModifyDNS(ctx, req.(*ModifyDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YadroService_ListDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YadroServiceServer).ListDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YadroService_ListDNS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YadroServiceServer).ListDNS(ctx, req.(*ListDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// YadroService_ServiceDesc is the grpc.ServiceDesc for YadroService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YadroService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.YadroService",
	HandlerType: (*YadroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeHostName",
			Handler:    _YadroService_ChangeHostName_Handler,
		},
		{
			MethodName: "ModifyDNS",
			Handler:    _YadroService_ModifyDNS_Handler,
		},
		{
			MethodName: "ListDNS",
			Handler:    _YadroService_ListDNS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
